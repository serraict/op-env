#!/usr/bin/env bash
# Script to manage environment variables using 1Password.
#
# This script reads variable names from .env.example and manages them using 1Password.
# Only variables that exist in the specified 1Password item will be managed.
#
# Configuration can be done via environment variables or command line arguments:
#   OP_VAULT: The 1Password vault name
#   OP_ITEM: The 1Password item name
#
# This script must be sourced to modify environment variables:
#
#   Load variables:
#     source ./scripts/op-env load [VAULT_NAME] [ITEM_NAME]
#
#   Unset variables:
#     source ./scripts/op-env unset [VAULT_NAME] [ITEM_NAME]
#
# Example using environment variables:
#     export OP_VAULT="My Vault"
#     export OP_ITEM="Project Credentials"
#     source ./scripts/op-env load
#
# Example using command line arguments:
#     source ./scripts/op-env load "My Vault" "Project Credentials"
#
# Note: The script will remind you if you forget to source it.

SCRIPT_NAME="op-env"

check_sourced() {
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        echo "Error: This script must be sourced, not executed." >&2
        echo "Usage:" >&2
        echo "  source ${BASH_SOURCE[0]} COMMAND [ARGS]" >&2
        exit 1
    fi
}

check_op_version() {
    if ! command -v op &> /dev/null; then
        echo "Error: 1Password CLI (op) not found or not accessible" >&2
        return 1
    fi

    version=$(op --version)
    if [[ ! $version == 2.30* ]]; then
        echo "Warning: This script was designed for op CLI version 2.30" >&2
    fi
}

get_vault() {
    local arg_vault="$1"
    if [ -n "$OP_VAULT" ]; then
        echo "$OP_VAULT"
    elif [ -n "$arg_vault" ]; then
        echo "$arg_vault"
    else
        echo "Error: No vault specified. Set OP_VAULT environment variable or provide as argument." >&2
        return 1
    fi
}

get_item() {
    local arg_item="$1"
    if [ -n "$OP_ITEM" ]; then
        echo "$OP_ITEM"
    elif [ -n "$arg_item" ]; then
        echo "$arg_item"
    else
        echo "Error: No item specified. Set OP_ITEM environment variable or provide as argument." >&2
        return 1
    fi
}

init_variables() {
    local vault="$1"
    local item="$2"
    VARIABLES=()
    
    # Read variables from .env.example and check if they exist in vault
    while read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^# ]] && continue
        # Extract variable name before the = sign
        var=${line%%=*}
        # Only add variables that exist in the vault
        if op item get "$item" --vault "$vault" --field "$var" --reveal >/dev/null 2>&1; then
            VARIABLES+=("$var")
        fi
    done < .env.example
}

load_credentials() {
    local vault
    local item
    
    vault=$(get_vault "$1") || return 1
    item=$(get_item "$2") || return 1

    check_op_version || return 1
    init_variables "$vault" "$item"

    # Load each variable from 1Password
    for var in "${VARIABLES[@]}"; do
        value=$(op item get "$item" --vault "$vault" --field "$var" --reveal)
        export "$var=$value"
        echo "Set $var"
    done
}

unset_credentials() {
    local vault
    local item
    
    vault=$(get_vault "$1") || return 1
    item=$(get_item "$2") || return 1

    check_op_version || return 1
    init_variables "$vault" "$item"

    for var in "${VARIABLES[@]}"; do
        if env | grep -q "^${var}="; then
            unset "$var"
            echo "Unset $var"
        fi
    done
}

check_sourced

case "$1" in
    "load")
        load_credentials "$2" "$3"
        ;;
    "unset")
        unset_credentials "$2" "$3"
        ;;
    *)
        echo "Usage: source $SCRIPT_NAME COMMAND [ARGS]" >&2
        echo "" >&2
        echo "Commands:" >&2
        echo "  load [VAULT_NAME] [ITEM_NAME]    Load environment variables from 1Password" >&2
        echo "  unset [VAULT_NAME] [ITEM_NAME]   Unset environment variables from 1Password" >&2
        echo "" >&2
        echo "Environment variables:" >&2
        echo "  OP_VAULT                         1Password vault name (alternative to VAULT_NAME)" >&2
        echo "  OP_ITEM                          1Password item name (alternative to ITEM_NAME)" >&2
        return 1
        ;;
esac
